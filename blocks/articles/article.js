/**
 * Articles block
 * - Fetches /query-index.json (generated by helix-query.yaml)
 * - Renders list, category filter and tag search
 * - Client-side only, no dependencies
 *
 * Usage: add Articles block to a page where you want listings.
 */

function el(tag, cls, html) {
  const e = document.createElement(tag);
  if (cls) e.className = cls;
  if (html !== undefined) e.innerHTML = html;
  return e;
}

function formatDate(iso) {
  if (!iso) return '';
  const d = new Date(iso);
  if (Number.isNaN(d.getTime())) return iso; // fallback
  return d.toLocaleDateString();
}

async function fetchIndex(url = '/query-index.json') {
  try {
    const res = await fetch(url, { cache: 'no-cache' });
    if (!res.ok) throw new Error(`Failed to fetch index: ${res.status}`);
    const json = await res.json();
    // index may be an object with .items or an array
    return Array.isArray(json) ? json : (json.items || []);
  } catch (err) {
    console.warn('articles block fetch error', err);
    return null;
  }
}

function buildCard(item) {
  const li = el('li', 'articles-card');
  const a = el('a', 'articles-card-link');
  a.href = item.path || '#';
  const title = el('h3', 'articles-card-title', item.title || 'No title');
  a.appendChild(title);

  const meta = el('div', 'articles-card-meta', `
    <span class="articles-card-date">${formatDate(item.publishDate)}</span>
    <span class="articles-card-cat">${item.category || ''}</span>
  `);
  a.appendChild(meta);

  if (item.description) {
    const desc = el('p', 'articles-card-desc', item.description);
    a.appendChild(desc);
  }

  // tags
  if (item.tags && item.tags.length) {
    const tagWrap = el('div', 'articles-card-tags');
    item.tags.forEach(t => {
      const b = el('button', 'articles-tag', t.trim());
      b.type = 'button';
      b.dataset.tag = t.trim();
      tagWrap.appendChild(b);
    });
    a.appendChild(tagWrap);
  }

  li.appendChild(a);
  return li;
}

export default async function decorate(block) {
  // wrapper elements
  block.classList.add('articles-block');
  const toolbar = el('div', 'articles-toolbar');
  const select = el('select', 'articles-category-select');
  select.innerHTML = '<option value="">All categories</option>';
  toolbar.appendChild(select);

  // search input
  const search = el('input', 'articles-search');
  search.placeholder = 'Search title / tags';
  toolbar.appendChild(search);

  // container for list
  const listWrap = el('div', 'articles-list-wrap');
  const ul = el('ul', 'articles-list');
  listWrap.appendChild(ul);

  // message
  const msg = el('div', 'articles-msg', 'Loading...');
  block.append(toolbar, msg, listWrap);

  // fetch index
  const index = await fetchIndex();
  if (!index) {
    msg.textContent = 'Unable to load index.';
    return;
  }
  msg.remove();

  // normalize items: ensure fields exist and tags array
  const items = index.map((it) => ({
    path: it.path || it.url || it.href || '',
    title: it.title || '',
    description: it.description || '',
    author: it.author || '',
    publishDate: it.publishDate || it.date || '',
    category: it.category || '',
    tags: (it.tags && Array.isArray(it.tags)) ? it.tags : (typeof it.tags === 'string' ? it.tags.split(',').map(s => s.trim()) : [])
  }));

  // build category options
  const categories = [...new Set(items.map(i => (i.category || '').trim()).filter(Boolean))].sort();
  categories.forEach((c) => {
    const opt = el('option', '', c);
    opt.value = c;
    select.appendChild(opt);
  });

  // render function
  function render(filtered) {
    ul.innerHTML = '';
    if (!filtered.length) {
      ul.appendChild(el('li', 'articles-empty', 'No articles found'));
      return;
    }
    filtered.forEach((it) => {
      ul.appendChild(buildCard(it));
    });
  }

  // filtering logic
  function applyFilters() {
    const q = (search.value || '').trim().toLowerCase();
    const cat = select.value;
    let filtered = items.slice();

    if (cat) filtered = filtered.filter(i => (i.category || '').toLowerCase() === cat.toLowerCase());
    if (q) {
      filtered = filtered.filter(i => {
        const inTitle = (i.title || '').toLowerCase().includes(q);
        const inDesc = (i.description || '').toLowerCase().includes(q);
        const inTags = (i.tags || []).some(t => t.toLowerCase().includes(q));
        return inTitle || inDesc || inTags;
      });
    }

    // sort descending by date if available
    filtered.sort((a, b) => {
      const da = new Date(a.publishDate || 0);
      const db = new Date(b.publishDate || 0);
      return db - da;
    });

    render(filtered);
  }

  // wire events (debounce search)
  let t;
  search.addEventListener('input', () => {
    clearTimeout(t);
    t = setTimeout(applyFilters, 250);
  });
  select.addEventListener('change', applyFilters);

  // tag click -> set search to tag
  ul.addEventListener('click', (e) => {
    const btn = e.target.closest('button.articles-tag');
    if (!btn) return;
    e.preventDefault();
    const tag = btn.dataset.tag;
    search.value = tag;
    applyFilters();
  });

  // initial render: latest 10
  render(items.slice().sort((a, b) => new Date(b.publishDate) - new Date(a.publishDate)).slice(0, 10));
}
